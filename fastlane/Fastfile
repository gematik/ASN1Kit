#
# Copyright (c) 2023 gematik GmbH
# 
# Licensed under the Apache License, Version 2.0 (the License);
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#     http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an 'AS IS' BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

xcversion(version: ENV["FL_XCODE_VERSION"] || "14.2")

schemes_mac = ["ASN1Kit_macOS"]
schemes_ios = ["ASN1Kit_iOS"]

lane :build_cli do |options|
  xcodebuild(
    archive: false,
    scheme: "asn1c"
  )
end

desc "Lane that resolves the project dependencies using Carthage."
lane :carthage_resolve_dependencies do
carthage_mint="mint run carthage"
carthage(executable: carthage_mint, command: "bootstrap", no_build: true)
# Create Xcodeproj when necessary for Carthage dependencies
sh("find", "../Carthage/Checkouts/", "-type", "d", "-mindepth", "1", "-maxdepth", "1", "!", "-exec", "sh", "-c", "test -e {}/*.xcodeproj/project.pbxproj", ";", "-execdir", "sh", "-c", "cd {}; if [ -e project.yml ]; then mint run xcodegen; fi;", ";")
sh("find", "../Carthage/Checkouts/", "-type", "d", "-mindepth", "1", "-maxdepth", "1", "!", "-exec", "sh", "-c", "test -e {}/*.xcodeproj/project.pbxproj", ";", "-execdir", "sh", "-c", "cd {}; if [ -e Package.swift ] && [ -e Package.xcconfig ]; then swift package generate-xcodeproj --xcconfig-overrides Package.xcconfig; elif [ -e Package.swift ]; then swift package generate-xcodeproj; fi;", ";")

carthage(
  executable: carthage_mint,
  command: "build",
  use_binaries: false,
  platform: "Mac,iOS",
  use_xcframeworks: true,
  cache_builds: true,
  configuration: "Debug"
)
end

desc "Build the project schemes for macOS"
lane :build_mac do
  schemes_mac.each do |scheme|
    scan(
      scheme: scheme,
      build_for_testing: true
    )
  end
end

desc "Build and test (scan) the project schemes for macOS"
desc "CI builds should run this lane on every commit"
desc ""
lane :test_mac do
  schemes_mac.each do |scheme|
    scan(scheme: scheme)
  end
end

desc "Build the project for iOS"
lane :build_ios do
  schemes_ios.each do |scheme|
    scan(
      scheme: scheme,
      build_for_testing: true
    )
  end
end

desc "Build and test (scan) the project for iOS"
desc "CI builds should run this lane on every commit"
lane :test_ios do
  schemes_ios.each do |scheme|
    scan(scheme: scheme)
  end
end

desc "Build the project for macOS and iOS by calling `build_mac` and `build_ios`"
lane :build_all do
  build_mac
  build_ios
end

desc "Build and test (scan) the project for macOS and iOS by calling `test_mac` and `test_ios`"
lane :test_all do
  test_mac
  test_ios
end

desc "Lane that sets up the SPM/Carthage dependencies and xcodeproj."
desc ""
lane :setup do
  carthage_resolve_dependencies
end

